{
  "apiVersion": "0.4.12-SNAPSHOT",
  "swaggerVersion": "1.2",
  "basePath": null,
  "resourcePath": "/api/requests",
  "produces": [
    "application/json"
  ],
  "apis": [
    {
      "path": "/api/requests/request/{requestId}/scale",
      "operations": [
        {
          "method": "PUT",
          "summary": "Scale the number of instances up or down for a specific Request",
          "notes": "",
          "type": "SingularityRequestParent",
          "nickname": "scale",
          "consumes": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "requestId",
              "description": "The Request ID to scale",
              "required": true,
              "type": "string",
              "paramType": "path",
              "allowMultiple": false
            },
            {
              "name": "body",
              "description": "Object to hold number of instances to request",
              "required": false,
              "type": "SingularityScaleRequest",
              "paramType": "body",
              "allowMultiple": false
            }
          ],
          "responseMessages": [
            {
              "code": 404,
              "message": "No Request with that ID"
            }
          ]
        },
        {
          "method": "DELETE",
          "summary": "Delete/cancel the expiring scale. This makes the scale request permanent.",
          "notes": "",
          "type": "SingularityRequestParent",
          "nickname": "deleteExpiringScale",
          "parameters": [
            {
              "name": "requestId",
              "description": "The Request ID",
              "required": true,
              "type": "string",
              "paramType": "path",
              "allowMultiple": false
            }
          ],
          "responseMessages": [
            {
              "code": 404,
              "message": "No Request or expiring scale request for that ID"
            }
          ]
        }
      ]
    },
    {
      "path": "/api/requests/request/{requestId}",
      "operations": [
        {
          "method": "GET",
          "summary": "Retrieve a specific Request by ID",
          "notes": "",
          "type": "SingularityRequestParent",
          "nickname": "getRequest",
          "parameters": [
            {
              "name": "requestId",
              "description": "Request ID",
              "required": true,
              "type": "string",
              "paramType": "path",
              "allowMultiple": false
            }
          ],
          "responseMessages": [
            {
              "code": 404,
              "message": "No Request with that ID"
            }
          ]
        },
        {
          "method": "DELETE",
          "summary": "Delete a specific Request by ID and return the deleted Request",
          "notes": "",
          "type": "SingularityRequest",
          "nickname": "deleteRequest",
          "consumes": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "requestId",
              "description": "The request ID to delete.",
              "required": true,
              "type": "string",
              "paramType": "path",
              "allowMultiple": false
            },
            {
              "name": "body",
              "description": "Delete options",
              "required": false,
              "type": "SingularityDeleteRequestRequest",
              "paramType": "body",
              "allowMultiple": false
            }
          ],
          "responseMessages": [
            {
              "code": 404,
              "message": "No Request with that ID"
            }
          ]
        }
      ]
    },
    {
      "path": "/api/requests",
      "operations": [
        {
          "method": "GET",
          "summary": "Retrieve the list of all requests",
          "notes": "",
          "type": "array",
          "items": {
            "$ref": "SingularityRequestParent"
          },
          "nickname": "getRequests",
          "parameters": []
        },
        {
          "method": "POST",
          "summary": "Create or update a Singularity Request",
          "notes": "",
          "type": "SingularityRequestParent",
          "nickname": "postRequest",
          "consumes": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "body",
              "description": "The Singularity request to create or update",
              "required": false,
              "type": "SingularityRequest",
              "paramType": "body",
              "allowMultiple": false
            }
          ],
          "responseMessages": [
            {
              "code": 400,
              "message": "Request object is invalid"
            },
            {
              "code": 409,
              "message": "Request object is being cleaned. Try again shortly"
            }
          ]
        }
      ]
    },
    {
      "path": "/api/requests/request/{requestId}/bounce",
      "operations": [
        {
          "method": "POST",
          "summary": "Bounce a specific Singularity request. A bounce launches replacement task(s), and then kills the original task(s) if the replacement(s) are healthy.",
          "notes": "",
          "type": "SingularityRequestParent",
          "nickname": "bounce",
          "consumes": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "requestId",
              "description": "The request ID to bounce",
              "required": true,
              "type": "string",
              "paramType": "path",
              "allowMultiple": false
            },
            {
              "name": "body",
              "description": "Bounce request options",
              "required": false,
              "type": "SingularityBounceRequest",
              "paramType": "body",
              "allowMultiple": false
            }
          ]
        },
        {
          "method": "DELETE",
          "summary": "Delete/cancel the expiring bounce. This makes the bounce request permanent.",
          "notes": "",
          "type": "SingularityRequestParent",
          "nickname": "deleteExpiringBounce",
          "parameters": [
            {
              "name": "requestId",
              "description": "The Request ID",
              "required": true,
              "type": "string",
              "paramType": "path",
              "allowMultiple": false
            }
          ],
          "responseMessages": [
            {
              "code": 404,
              "message": "No Request or expiring bounce request for that ID"
            }
          ]
        }
      ]
    },
    {
      "path": "/api/requests/request/{requestId}/skipHealthchecks",
      "operations": [
        {
          "method": "PUT",
          "summary": "Update the skipHealthchecks field for the request, possibly temporarily",
          "notes": "",
          "type": "SingularityRequestParent",
          "nickname": "skipHealthchecks",
          "consumes": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "requestId",
              "description": "The Request ID to scale",
              "required": true,
              "type": "string",
              "paramType": "path",
              "allowMultiple": false
            },
            {
              "name": "body",
              "description": "SkipHealtchecks options",
              "required": false,
              "type": "SingularitySkipHealthchecksRequest",
              "paramType": "body",
              "allowMultiple": false
            }
          ],
          "responseMessages": [
            {
              "code": 404,
              "message": "No Request with that ID"
            }
          ]
        },
        {
          "method": "DELETE",
          "summary": "Delete/cancel the expiring skipHealthchecks. This makes the skipHealthchecks request permanent.",
          "notes": "",
          "type": "SingularityRequestParent",
          "nickname": "deleteExpiringSkipHealthchecks",
          "parameters": [
            {
              "name": "requestId",
              "description": "The Request ID",
              "required": true,
              "type": "string",
              "paramType": "path",
              "allowMultiple": false
            }
          ],
          "responseMessages": [
            {
              "code": 404,
              "message": "No Request or expiring skipHealthchecks request for that ID"
            }
          ]
        }
      ]
    },
    {
      "path": "/api/requests/request/{requestId}/run",
      "operations": [
        {
          "method": "POST",
          "summary": "Schedule a one-off or scheduled Singularity request for immediate execution.",
          "notes": "",
          "type": "SingularityRequestParent",
          "nickname": "scheduleImmediately",
          "consumes": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "requestId",
              "description": "The request ID to run",
              "required": true,
              "type": "string",
              "paramType": "path",
              "allowMultiple": false
            },
            {
              "name": "body",
              "required": false,
              "type": "SingularityRunNowRequest",
              "paramType": "body",
              "allowMultiple": false
            }
          ],
          "responseMessages": [
            {
              "code": 400,
              "message": "Singularity Request is not scheduled or one-off"
            }
          ]
        }
      ]
    },
    {
      "path": "/api/requests/request/{requestId}/pause",
      "operations": [
        {
          "method": "POST",
          "summary": "Pause a Singularity request, future tasks will not run until it is manually unpaused. API can optionally choose to kill existing tasks",
          "notes": "",
          "type": "SingularityRequestParent",
          "nickname": "pause",
          "consumes": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "requestId",
              "description": "The request ID to pause",
              "required": true,
              "type": "string",
              "paramType": "path",
              "allowMultiple": false
            },
            {
              "name": "body",
              "description": "Pause Request Options",
              "required": false,
              "type": "SingularityPauseRequest",
              "paramType": "body",
              "allowMultiple": false
            }
          ],
          "responseMessages": [
            {
              "code": 409,
              "message": "Request is already paused or being cleaned"
            }
          ]
        },
        {
          "method": "DELETE",
          "summary": "Delete/cancel the expiring pause. This makes the pause request permanent.",
          "notes": "",
          "type": "SingularityRequestParent",
          "nickname": "deleteExpiringPause",
          "parameters": [
            {
              "name": "requestId",
              "description": "The Request ID",
              "required": true,
              "type": "string",
              "paramType": "path",
              "allowMultiple": false
            }
          ],
          "responseMessages": [
            {
              "code": 404,
              "message": "No Request or expiring pause request for that ID"
            }
          ]
        }
      ]
    },
    {
      "path": "/api/requests/request/{requestId}/unpause",
      "operations": [
        {
          "method": "POST",
          "summary": "Unpause a Singularity Request, scheduling new tasks immediately",
          "notes": "",
          "type": "SingularityRequestParent",
          "nickname": "unpause",
          "consumes": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "requestId",
              "description": "The request ID to unpause",
              "required": true,
              "type": "string",
              "paramType": "path",
              "allowMultiple": false
            },
            {
              "name": "body",
              "required": false,
              "type": "SingularityUnpauseRequest",
              "paramType": "body",
              "allowMultiple": false
            }
          ],
          "responseMessages": [
            {
              "code": 409,
              "message": "Request is not paused"
            }
          ]
        }
      ]
    },
    {
      "path": "/api/requests/request/{requestId}/exit-cooldown",
      "operations": [
        {
          "method": "POST",
          "summary": "Immediately exits cooldown, scheduling new tasks immediately",
          "notes": "",
          "type": "SingularityRequestParent",
          "nickname": "exitCooldown",
          "consumes": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "requestId",
              "required": true,
              "type": "string",
              "paramType": "path",
              "allowMultiple": false
            },
            {
              "name": "body",
              "required": false,
              "type": "SingularityExitCooldownRequest",
              "paramType": "body",
              "allowMultiple": false
            }
          ],
          "responseMessages": [
            {
              "code": 409,
              "message": "Request is not in cooldown"
            }
          ]
        }
      ]
    },
    {
      "path": "/api/requests/active",
      "operations": [
        {
          "method": "GET",
          "summary": "Retrieve the list of active requests",
          "notes": "",
          "type": "array",
          "items": {
            "$ref": "SingularityRequestParent"
          },
          "nickname": "getActiveRequests",
          "parameters": []
        }
      ]
    },
    {
      "path": "/api/requests/paused",
      "operations": [
        {
          "method": "GET",
          "summary": "Retrieve the list of paused requests",
          "notes": "",
          "type": "array",
          "items": {
            "$ref": "SingularityRequestParent"
          },
          "nickname": "getPausedRequests",
          "parameters": []
        }
      ]
    },
    {
      "path": "/api/requests/cooldown",
      "operations": [
        {
          "method": "GET",
          "summary": "Retrieve the list of requests in system cooldown",
          "notes": "",
          "type": "array",
          "items": {
            "$ref": "SingularityRequestParent"
          },
          "nickname": "getCooldownRequests",
          "parameters": []
        }
      ]
    },
    {
      "path": "/api/requests/finished",
      "operations": [
        {
          "method": "GET",
          "summary": "Retreive the list of finished requests (Scheduled requests which have exhausted their schedules)",
          "notes": "",
          "type": "array",
          "items": {
            "$ref": "SingularityRequestParent"
          },
          "nickname": "getFinishedRequests",
          "parameters": []
        }
      ]
    },
    {
      "path": "/api/requests/queued/pending",
      "operations": [
        {
          "method": "GET",
          "summary": "Retrieve the list of pending requests",
          "notes": "",
          "type": "array",
          "items": {
            "$ref": "SingularityPendingRequest"
          },
          "nickname": "getPendingRequests",
          "parameters": []
        }
      ]
    },
    {
      "path": "/api/requests/queued/cleanup",
      "operations": [
        {
          "method": "GET",
          "summary": "Retrieve the list of requests being cleaned up",
          "notes": "",
          "type": "array",
          "items": {
            "$ref": "SingularityRequestCleanup"
          },
          "nickname": "getCleanupRequests",
          "parameters": []
        }
      ]
    },
    {
      "path": "/api/requests/lbcleanup",
      "operations": [
        {
          "method": "GET",
          "summary": "Retrieve the list of tasks being cleaned from load balancers.",
          "notes": "",
          "items": {
            "type": "string"
          },
          "nickname": "getLbCleanupRequests",
          "parameters": []
        }
      ]
    }
  ],
  "models": {
    "Resources": {
      "id": "Resources",
      "properties": {
        "cpus": {
          "type": "number",
          "format": "double"
        },
        "memoryMb": {
          "type": "number",
          "format": "double"
        },
        "numPorts": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "LoadBalancerRequestId": {
      "id": "LoadBalancerRequestId",
      "properties": {
        "id": {
          "type": "string"
        },
        "requestType": {
          "$ref": "LoadBalancerRequestType",
          "enum": [
            "ADD",
            "REMOVE",
            "DEPLOY",
            "DELETE"
          ]
        },
        "attemptNumber": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "SingularityRequestDeployState": {
      "id": "SingularityRequestDeployState",
      "properties": {
        "requestId": {
          "type": "string"
        },
        "activeDeploy": {
          "$ref": "SingularityDeployMarker"
        },
        "pendingDeploy": {
          "$ref": "SingularityDeployMarker"
        }
      }
    },
    "SingularityRequestParent": {
      "id": "SingularityRequestParent",
      "properties": {
        "request": {
          "$ref": "SingularityRequest"
        },
        "state": {
          "$ref": "RequestState",
          "enum": [
            "ACTIVE",
            "DELETED",
            "PAUSED",
            "SYSTEM_COOLDOWN",
            "FINISHED",
            "DEPLOYING_TO_UNPAUSE"
          ]
        },
        "requestDeployState": {
          "$ref": "SingularityRequestDeployState"
        },
        "activeDeploy": {
          "$ref": "SingularityDeploy"
        },
        "pendingDeploy": {
          "$ref": "SingularityDeploy"
        },
        "pendingDeployState": {
          "$ref": "SingularityPendingDeploy"
        },
        "expiringBounce": {
          "$ref": "SingularityExpiringBounce"
        },
        "expiringPause": {
          "$ref": "SingularityExpiringPause"
        },
        "expiringScale": {
          "$ref": "SingularityExpiringScale"
        },
        "expiringSkipHealthchecks": {
          "$ref": "SingularityExpiringSkipHealthchecks"
        }
      }
    },
    "SingularitySkipHealthchecksRequest": {
      "id": "SingularitySkipHealthchecksRequest",
      "properties": {
        "skipHealthchecks": {
          "type": "boolean",
          "description": "If set to true, healthchecks will be skipped for all tasks for this request until reversed"
        },
        "message": {
          "type": "string",
          "description": "A message to show to users about why this action was taken"
        },
        "durationMillis": {
          "type": "integer",
          "format": "int64",
          "description": "The number of milliseconds to wait before reversing the effects of this action (letting it expire)"
        },
        "actionId": {
          "type": "string",
          "description": "An id to associate with this action for metadata purposes"
        }
      }
    },
    "SingularityExitCooldownRequest": {
      "id": "SingularityExitCooldownRequest",
      "properties": {
        "message": {
          "type": "string",
          "description": "A message to show to users about why this action was taken"
        },
        "actionId": {
          "type": "string",
          "description": "An id to associate with this action for metadata purposes"
        },
        "skipHealthchecks": {
          "type": "boolean",
          "description": "Instruct new tasks that are scheduled immediately while executing cooldown to skip healthchecks"
        }
      }
    },
    "SingularityPendingDeploy": {
      "id": "SingularityPendingDeploy",
      "properties": {
        "deployMarker": {
          "$ref": "SingularityDeployMarker"
        },
        "lastLoadBalancerUpdate": {
          "$ref": "SingularityLoadBalancerUpdate"
        },
        "currentDeployState": {
          "$ref": "DeployState",
          "enum": [
            "SUCCEEDED",
            "FAILED_INTERNAL_STATE",
            "CANCELING",
            "WAITING",
            "OVERDUE",
            "FAILED",
            "CANCELED"
          ]
        },
        "deployProgress": {
          "$ref": "SingularityDeployProgress"
        }
      }
    },
    "SingularityUnpauseRequest": {
      "id": "SingularityUnpauseRequest",
      "properties": {
        "message": {
          "type": "string",
          "description": "A message to show to users about why this action was taken"
        },
        "actionId": {
          "type": "string",
          "description": "An id to associate with this action for metadata purposes"
        },
        "skipHealthchecks": {
          "type": "boolean",
          "description": "If set to true, instructs new tasks that are scheduled immediately while unpausing to skip healthchecks"
        }
      }
    },
    "SingularityLoadBalancerUpdate": {
      "id": "SingularityLoadBalancerUpdate",
      "properties": {
        "loadBalancerState": {
          "$ref": "BaragonRequestState",
          "enum": [
            "UNKNOWN",
            "FAILED",
            "WAITING",
            "SUCCESS",
            "CANCELING",
            "CANCELED",
            "INVALID_REQUEST_NOOP"
          ]
        },
        "message": {
          "type": "string"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        },
        "uri": {
          "type": "string"
        },
        "method": {
          "$ref": "LoadBalancerMethod",
          "enum": [
            "PRE_ENQUEUE",
            "ENQUEUE",
            "CHECK_STATE",
            "CANCEL",
            "DELETE"
          ]
        },
        "loadBalancerRequestId": {
          "$ref": "LoadBalancerRequestId"
        }
      }
    },
    "SingularityExpiringSkipHealthchecks": {
      "id": "SingularityExpiringSkipHealthchecks",
      "properties": {
        "revertToSkipHealthchecks": {
          "type": "boolean"
        },
        "startMillis": {
          "type": "integer",
          "format": "int64"
        },
        "expiringAPIRequestObject": {
          "$ref": "T"
        },
        "user": {
          "type": "string"
        },
        "actionId": {
          "type": "string"
        },
        "requestId": {
          "type": "string"
        }
      }
    },
    "SingularityRequestCleanup": {
      "id": "SingularityRequestCleanup",
      "properties": {
        "user": {
          "type": "string"
        },
        "cleanupType": {
          "$ref": "RequestCleanupType",
          "enum": [
            "DELETING",
            "PAUSING",
            "BOUNCE",
            "INCREMENTAL_BOUNCE"
          ]
        },
        "killTasks": {
          "type": "boolean"
        },
        "skipHealthchecks": {
          "type": "boolean"
        },
        "deployId": {
          "type": "string"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        },
        "requestId": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "actionId": {
          "type": "string"
        }
      }
    },
    "SingularityDockerPortMapping": {
      "id": "SingularityDockerPortMapping",
      "properties": {
        "containerPortType": {
          "$ref": "SingularityPortMappingType",
          "enum": [
            "LITERAL",
            "FROM_OFFER"
          ]
        },
        "hostPortType": {
          "$ref": "SingularityPortMappingType",
          "enum": [
            "LITERAL",
            "FROM_OFFER"
          ]
        },
        "containerPort": {
          "type": "integer",
          "format": "int32"
        },
        "hostPort": {
          "type": "integer",
          "format": "int32"
        },
        "protocol": {
          "type": "string"
        }
      }
    },
    "S3Artifact": {
      "id": "S3Artifact",
      "properties": {
        "s3Bucket": {
          "type": "string"
        },
        "s3ObjectKey": {
          "type": "string"
        },
        "filesize": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "filename": {
          "type": "string"
        },
        "md5sum": {
          "type": "string"
        },
        "targetFolderRelativeToTask": {
          "type": "string"
        }
      }
    },
    "SingularityExpiringScale": {
      "id": "SingularityExpiringScale",
      "properties": {
        "revertToInstances": {
          "type": "integer",
          "format": "int32"
        },
        "startMillis": {
          "type": "integer",
          "format": "int64"
        },
        "expiringAPIRequestObject": {
          "$ref": "T"
        },
        "user": {
          "type": "string"
        },
        "actionId": {
          "type": "string"
        },
        "requestId": {
          "type": "string"
        }
      }
    },
    "ExecutorData": {
      "id": "ExecutorData",
      "properties": {
        "cmd": {
          "type": "string"
        },
        "embeddedArtifacts": {
          "type": "array",
          "items": {
            "$ref": "EmbeddedArtifact"
          }
        },
        "externalArtifacts": {
          "type": "array",
          "items": {
            "$ref": "ExternalArtifact"
          }
        },
        "s3Artifacts": {
          "type": "array",
          "items": {
            "$ref": "S3Artifact"
          }
        },
        "successfulExitCodes": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "runningSentinel": {
          "type": "string"
        },
        "user": {
          "type": "string"
        },
        "extraCmdLineArgs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "loggingTag": {
          "type": "string"
        },
        "loggingExtraFields": {
          "$ref": "Map[string,string]"
        },
        "sigKillProcessesAfterMillis": {
          "type": "integer",
          "format": "int64"
        },
        "maxTaskThreads": {
          "type": "integer",
          "format": "int32"
        },
        "preserveTaskSandboxAfterFinish": {
          "type": "boolean"
        },
        "loggingS3Bucket": {
          "type": "string"
        },
        "maxOpenFiles": {
          "type": "integer",
          "format": "int32"
        },
        "skipLogrotateAndCompress": {
          "type": "boolean"
        },
        "s3ArtifactSignatures": {
          "type": "array",
          "items": {
            "$ref": "S3ArtifactSignature"
          }
        }
      }
    },
    "SingularityRunNowRequest": {
      "id": "SingularityRunNowRequest",
      "properties": {
        "message": {
          "type": "string",
          "description": "A message to show to users about why this action was taken"
        },
        "runId": {
          "type": "string",
          "description": "An id to associate with this request which will be associated with the corresponding launched tasks"
        },
        "commandLineArgs": {
          "type": "array",
          "description": "Command line arguments to be passed to the task",
          "items": {
            "type": "string"
          }
        },
        "skipHealthchecks": {
          "type": "boolean",
          "description": "If set to true, healthchecks will be skipped for this task run"
        }
      }
    },
    "SingularityScaleRequest": {
      "id": "SingularityScaleRequest",
      "properties": {
        "instances": {
          "type": "integer",
          "format": "int32",
          "description": "The number of instances to scale to"
        },
        "skipHealthchecks": {
          "type": "boolean",
          "description": "If set to true, healthchecks will be skipped while scaling this request (only)"
        },
        "message": {
          "type": "string",
          "description": "A message to show to users about why this action was taken"
        },
        "durationMillis": {
          "type": "integer",
          "format": "int64",
          "description": "The number of milliseconds to wait before reversing the effects of this action (letting it expire)"
        },
        "actionId": {
          "type": "string",
          "description": "An id to associate with this action for metadata purposes"
        }
      }
    },
    "SingularityRequest": {
      "id": "SingularityRequest",
      "properties": {
        "id": {
          "type": "string"
        },
        "requestType": {
          "$ref": "RequestType",
          "enum": [
            "SERVICE",
            "WORKER",
            "SCHEDULED",
            "ON_DEMAND",
            "RUN_ONCE"
          ]
        },
        "owners": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "numRetriesOnFailure": {
          "type": "integer",
          "format": "int32"
        },
        "schedule": {
          "type": "string"
        },
        "quartzSchedule": {
          "type": "string"
        },
        "scheduleType": {
          "$ref": "ScheduleType"
        },
        "killOldNonLongRunningTasksAfterMillis": {
          "type": "integer",
          "format": "int64"
        },
        "scheduledExpectedRuntimeMillis": {
          "type": "integer",
          "format": "int64"
        },
        "waitAtLeastMillisAfterTaskFinishesForReschedule": {
          "type": "integer",
          "format": "int64"
        },
        "instances": {
          "type": "integer",
          "format": "int32"
        },
        "skipHealthchecks": {
          "type": "boolean"
        },
        "rackSensitive": {
          "type": "boolean"
        },
        "rackAffinity": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "slavePlacement": {
          "$ref": "SlavePlacement"
        },
        "requiredSlaveAttributes": {
          "$ref": "Map[string,string]"
        },
        "allowedSlaveAttributes": {
          "$ref": "Map[string,string]"
        },
        "loadBalanced": {
          "type": "boolean"
        },
        "group": {
          "type": "string"
        },
        "readOnlyGroups": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "bounceAfterScale": {
          "type": "boolean"
        },
        "emailConfigurationOverrides": {
          "$ref": "Map[SingularityEmailType,List[SingularityEmailDestination]]"
        }
      }
    },
    "SingularityDeployMarker": {
      "id": "SingularityDeployMarker",
      "properties": {
        "requestId": {
          "type": "string"
        },
        "deployId": {
          "type": "string"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        },
        "user": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "SingularityExpiringPause": {
      "id": "SingularityExpiringPause",
      "properties": {
        "startMillis": {
          "type": "integer",
          "format": "int64"
        },
        "expiringAPIRequestObject": {
          "$ref": "T"
        },
        "user": {
          "type": "string"
        },
        "actionId": {
          "type": "string"
        },
        "requestId": {
          "type": "string"
        }
      }
    },
    "S3ArtifactSignature": {
      "id": "S3ArtifactSignature",
      "properties": {
        "artifactFilename": {
          "type": "string"
        },
        "s3ObjectKey": {
          "type": "string"
        },
        "s3Bucket": {
          "type": "string"
        },
        "filesize": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "filename": {
          "type": "string"
        },
        "md5sum": {
          "type": "string"
        },
        "targetFolderRelativeToTask": {
          "type": "string"
        }
      }
    },
    "SingularityDeploy": {
      "id": "SingularityDeploy",
      "required": [
        "requestId",
        "id"
      ],
      "properties": {
        "requestId": {
          "type": "string",
          "description": "Singularity Request Id which is associated with this deploy."
        },
        "id": {
          "type": "string",
          "description": "Singularity deploy id."
        },
        "version": {
          "type": "string",
          "description": "Deploy version"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64",
          "description": "Deploy timestamp."
        },
        "metadata": {
          "$ref": "Map[string,string]",
          "description": "Map of metadata key/value pairs associated with the deployment."
        },
        "containerInfo": {
          "$ref": "SingularityContainerInfo",
          "description": "Container information for deployment into a container."
        },
        "customExecutorCmd": {
          "type": "string",
          "description": "Custom Mesos executor"
        },
        "customExecutorId": {
          "type": "string",
          "description": "Custom Mesos executor id."
        },
        "customExecutorSource": {
          "type": "string",
          "description": "Custom Mesos executor source."
        },
        "customExecutorResources": {
          "$ref": "Resources",
          "description": "Resources to allocate for custom mesos executor"
        },
        "customExecutorUser": {
          "type": "string",
          "description": "User to run custom executor as"
        },
        "resources": {
          "$ref": "Resources",
          "description": "Resources required for this deploy."
        },
        "command": {
          "type": "string",
          "description": "Command to execute for this deployment."
        },
        "arguments": {
          "type": "array",
          "description": "Command arguments.",
          "items": {
            "type": "string"
          }
        },
        "env": {
          "$ref": "Map[string,string]",
          "description": "Map of environment variable definitions."
        },
        "uris": {
          "type": "array",
          "description": "List of URIs to download before executing the deploy command.",
          "items": {
            "type": "string"
          }
        },
        "executorData": {
          "$ref": "ExecutorData",
          "description": "Executor specific information"
        },
        "labels": {
          "$ref": "Map[string,string]",
          "description": "Labels for tasks associated with this deploy"
        },
        "healthcheckUri": {
          "type": "string",
          "description": "Deployment Healthcheck URI, if specified will be called after TASK_RUNNING."
        },
        "healthcheckIntervalSeconds": {
          "type": "integer",
          "format": "int64",
          "description": "Time to wait after a failed healthcheck to try again in seconds."
        },
        "healthcheckTimeoutSeconds": {
          "type": "integer",
          "format": "int64",
          "description": "Single healthcheck HTTP timeout in seconds."
        },
        "healthcheckPortIndex": {
          "type": "integer",
          "format": "int32",
          "description": "Perform healthcheck on this dynamically allocated port (e.g. 0 for first port), defaults to first port"
        },
        "skipHealthchecksOnDeploy": {
          "type": "boolean",
          "description": "Allows skipping of health checks when deploying."
        },
        "healthcheckProtocol": {
          "$ref": "HealthcheckProtocol",
          "description": "Healthcheck protocol - HTTP or HTTPS"
        },
        "healthcheckMaxRetries": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum number of times to retry an individual healthcheck before failing the deploy."
        },
        "healthcheckMaxTotalTimeoutSeconds": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum amount of time to wait before failing a deploy for healthchecks to pass."
        },
        "deployHealthTimeoutSeconds": {
          "type": "integer",
          "format": "int64",
          "description": "Number of seconds that Singularity waits for this service to become healthy (for it to download artifacts, start running, and optionally pass healthchecks.)"
        },
        "considerHealthyAfterRunningForSeconds": {
          "type": "integer",
          "format": "int64",
          "description": "Number of seconds that a service must be healthy to consider the deployment to be successful."
        },
        "serviceBasePath": {
          "type": "string",
          "description": "The base path for the API exposed by the deploy. Used in conjunction with the Load balancer API."
        },
        "loadBalancerGroups": {
          "type": "array",
          "uniqueItems": true,
          "description": "List of load balancer groups associated with this deployment.",
          "items": {
            "type": "string"
          }
        },
        "loadBalancerPortIndex": {
          "type": "integer",
          "format": "int32",
          "description": "Send this port to the load balancer api (e.g. 0 for first port), defaults to first port"
        },
        "loadBalancerOptions": {
          "$ref": "Map[string,Object]",
          "description": "Map (Key/Value) of options for the load balancer."
        },
        "deployInstanceCountPerStep": {
          "type": "integer",
          "format": "int32",
          "description": "deploy this many instances at a time"
        },
        "deployStepWaitTimeMs": {
          "type": "integer",
          "format": "int32",
          "description": "wait this long between deploy steps"
        },
        "autoAdvanceDeploySteps": {
          "type": "boolean",
          "description": "automatically advance to the next target instance count after `deployStepWaitTimeMs` seconds"
        },
        "maxTaskRetries": {
          "type": "integer",
          "format": "int32",
          "description": "allowed at most this many failed tasks to be retried before failing the deploy"
        }
      }
    },
    "SingularityPendingRequest": {
      "id": "SingularityPendingRequest",
      "properties": {
        "requestId": {
          "type": "string"
        },
        "deployId": {
          "type": "string"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        },
        "pendingType": {
          "$ref": "PendingType",
          "enum": [
            "IMMEDIATE",
            "ONEOFF",
            "BOUNCE",
            "NEW_DEPLOY",
            "NEXT_DEPLOY_STEP",
            "UNPAUSED",
            "RETRY",
            "UPDATED_REQUEST",
            "DECOMISSIONED_SLAVE_OR_RACK",
            "TASK_DONE",
            "STARTUP",
            "CANCEL_BOUNCE",
            "TASK_BOUNCE",
            "DEPLOY_CANCELLED"
          ]
        },
        "user": {
          "type": "string"
        },
        "cmdLineArgsList": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "runId": {
          "type": "string"
        },
        "skipHealthchecks": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        },
        "actionId": {
          "type": "string"
        }
      }
    },
    "SingularityPauseRequest": {
      "id": "SingularityPauseRequest",
      "properties": {
        "killTasks": {
          "type": "boolean",
          "description": "If set to false, tasks will be allowed to finish instead of killed immediately"
        },
        "message": {
          "type": "string",
          "description": "A message to show to users about why this action was taken"
        },
        "durationMillis": {
          "type": "integer",
          "format": "int64",
          "description": "The number of milliseconds to wait before reversing the effects of this action (letting it expire)"
        },
        "actionId": {
          "type": "string",
          "description": "An id to associate with this action for metadata purposes"
        }
      }
    },
    "EmbeddedArtifact": {
      "id": "EmbeddedArtifact",
      "properties": {
        "content": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          }
        },
        "name": {
          "type": "string"
        },
        "filename": {
          "type": "string"
        },
        "md5sum": {
          "type": "string"
        },
        "targetFolderRelativeToTask": {
          "type": "string"
        }
      }
    },
    "SingularityTaskId": {
      "id": "SingularityTaskId",
      "properties": {
        "requestId": {
          "type": "string"
        },
        "deployId": {
          "type": "string"
        },
        "startedAt": {
          "type": "integer",
          "format": "int64"
        },
        "instanceNo": {
          "type": "integer",
          "format": "int32"
        },
        "sanitizedHost": {
          "type": "string"
        },
        "sanitizedRackId": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "host": {
          "type": "string"
        },
        "rackId": {
          "type": "string"
        }
      }
    },
    "SingularityDeployProgress": {
      "id": "SingularityDeployProgress",
      "properties": {
        "targetActiveInstances": {
          "type": "integer",
          "format": "int32"
        },
        "deployInstanceCountPerStep": {
          "type": "integer",
          "format": "int32"
        },
        "deployStepWaitTimeMs": {
          "type": "integer",
          "format": "int64"
        },
        "stepComplete": {
          "type": "boolean"
        },
        "autoAdvanceDeploySteps": {
          "type": "boolean"
        },
        "failedDeployTasks": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "SingularityTaskId"
          }
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "SingularityExpiringBounce": {
      "id": "SingularityExpiringBounce",
      "properties": {
        "deployId": {
          "type": "string"
        },
        "startMillis": {
          "type": "integer",
          "format": "int64"
        },
        "expiringAPIRequestObject": {
          "$ref": "T"
        },
        "user": {
          "type": "string"
        },
        "actionId": {
          "type": "string"
        },
        "requestId": {
          "type": "string"
        }
      }
    },
    "ExternalArtifact": {
      "id": "ExternalArtifact",
      "properties": {
        "url": {
          "type": "string"
        },
        "filesize": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "filename": {
          "type": "string"
        },
        "md5sum": {
          "type": "string"
        },
        "targetFolderRelativeToTask": {
          "type": "string"
        }
      }
    },
    "SingularityContainerInfo": {
      "id": "SingularityContainerInfo",
      "properties": {
        "type": {
          "$ref": "SingularityContainerType",
          "enum": [
            "MESOS",
            "DOCKER"
          ]
        },
        "volumes": {
          "type": "array",
          "items": {
            "$ref": "SingularityVolume"
          }
        },
        "docker": {
          "$ref": "SingularityDockerInfo"
        }
      }
    },
    "SingularityVolume": {
      "id": "SingularityVolume",
      "properties": {
        "containerPath": {
          "type": "string"
        },
        "hostPath": {
          "type": "string"
        },
        "mode": {
          "$ref": "SingularityDockerVolumeMode"
        }
      }
    },
    "SingularityBounceRequest": {
      "id": "SingularityBounceRequest",
      "properties": {
        "incremental": {
          "type": "boolean",
          "description": "If present and set to true, old tasks will be killed as soon as replacement tasks are available, instead of waiting for all replacement tasks to be healthy"
        },
        "skipHealthchecks": {
          "type": "boolean",
          "description": "Instruct replacement tasks for this bounce only to skip healthchecks"
        },
        "message": {
          "type": "string",
          "description": "A message to show to users about why this action was taken"
        },
        "durationMillis": {
          "type": "integer",
          "format": "int64",
          "description": "The number of milliseconds to wait before reversing the effects of this action (letting it expire)"
        },
        "actionId": {
          "type": "string",
          "description": "An id to associate with this action for metadata purposes"
        }
      }
    },
    "SingularityDockerInfo": {
      "id": "SingularityDockerInfo",
      "properties": {
        "image": {
          "type": "string"
        },
        "privileged": {
          "type": "boolean"
        },
        "network": {
          "$ref": "SingularityDockerNetworkType"
        },
        "portMappings": {
          "type": "array",
          "items": {
            "$ref": "SingularityDockerPortMapping"
          }
        },
        "forcePullImage": {
          "type": "boolean"
        },
        "parameters": {
          "$ref": "Map[string,string]"
        }
      }
    },
    "SingularityDeleteRequestRequest": {
      "id": "SingularityDeleteRequestRequest",
      "properties": {
        "message": {
          "type": "string",
          "description": "A message to show to users about why this action was taken"
        },
        "actionId": {
          "type": "string",
          "description": "An id to associate with this action for metadata purposes"
        }
      }
    }
  }
}
